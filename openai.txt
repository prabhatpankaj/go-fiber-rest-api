type Users struct {
	ID           uuid.UUID `db:"id" json:"id" validate:"required,uuid"`
	Username     string    `db:"username" json:"username" validate:"required,lte=50"`
	Password     string    `db:"password" json:"password" validate:"required,lte=1000"`
	ActiveStatus int       `db:"active_status" json:"active_status" validate:"required,len=1"`
	CreatedAt    time.Time `db:"created_at" json:"created_at"`
	UpdatedAt    time.Time `db:"updated_at" json:"updated_at"`
}


func NewValidator() *validator.Validate {
	validate := validator.New()
	_ = validate.RegisterValidation("uuid", func(fl validator.FieldLevel) bool {
		field := fl.Field().String()
		if _, err := uuid.Parse(field); err != nil {
			return false // if there is an error, validation should return false
		}
		return true // if no error, validation should return true
	})

	return validate
}

func ValidatorErrors(err error) map[string]string {
	// Define fields map.
	fields := map[string]string{}

	// Make error message for each invalid field.
	for _, err := range err.(validator.ValidationErrors) {
		fields[err.Field()] = err.Error()
	}

	return fields
}


validate := NewValidator()
	if err := validate.Struct(user); err != nil {
		// Return, if some fields are not valid.
		return c.Status(fiber.StatusBadRequest).JSON(fiber.Map{
			"error": true,
			"msg":   utils.ValidatorErrors(err),
		})
	}


i am getting api response as 

{
    "error": true,
    "msg": {
        "ID": "Key: 'Users.ID' Error:Field validation for 'ID' failed on the 'uuid' tag"
    }
}

where is exactly issue in this 